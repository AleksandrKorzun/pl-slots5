import { EVENTS_DEFAULT } from '../EventsDispatcher';

export default class Background extends Phaser.GameObjects.Sprite {
    constructor(scene, sprite, isAdaptive, scales = [1, 1, 1, 1]) {
        super(scene, 0, 0, sprite);
        this.addProperties(['scale'])
            .setCustomPosition(0, 0)
            .setCustomScale(...scales);
        if (isAdaptive) {
            this.addProperties(['image']).setCustomImage(`${sprite}_horizontal`, `${sprite}_vertical`);
        }
    }

    changeBackground(newSprite, isAdaptive = false, scales = [1, 1, 1, 1], emitMessage = EVENTS_DEFAULT.BG_CHANGED) {
        this.scene.cameras.main.fadeOut(500);
        const fadeIn = () => {
            // could be used to do some action when screen is fully black
            this.scene.emitter.emit(emitMessage);
            this.scene.cameras.main.fadeIn(500);
            this.setTexture(newSprite).setCustomScale(...scales);
            if (!isAdaptive) {
                this.setCustomImage(newSprite, newSprite).setCustomScale(...scales);
                return;
            }

            this.addProperties(['image']);
            this.setCustomImage(`${newSprite}_horizontal`, `${newSprite}_vertical`).setCustomScale(...scales);
        };
        this.scene.time.delayedCall(500, fadeIn, [], this);
        return this;
    }

    addBlackBlur(depth, alpha = 0.7) {
        this.darkBlur = this.scene.add
            .graphics(0, 0)
            .fillStyle(0x0, alpha)
            .fillRect(-10000, -10000, 20000, 20000)
            .setCustomPosition(0, 0)
            .setAlpha(0)
            .setDepth(depth);
        this.scene.mainContainer.add([this.darkBlur]);
        this.scene.sort();
        this.scene.pj.fadeIn(this.darkBlur);

        return this;
    }

    removeBlackBlur() {
        if (!this.darkBlur) {
            return this;
        }
        const blur = this.darkBlur;
        this.scene.pj.fadeOut(blur, { onComplete: () => blur.destroy() });

        return this;
    }
}
