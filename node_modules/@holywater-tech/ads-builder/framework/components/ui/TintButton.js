import Utils from '../../Utils';

export const PINK = 0xdf2f64;
export const GREEN = 0x5fe540;
export const DARK_PINK = 0x7c1d3d;

const defaultOptions = {
    buttonColor: 0xffffff,
    font: 'Nunito-Regular',
    fontSize: 26,
    text: '',
    textColor: '#ffffff',
    textY: 0,
    textX: 0,
    textOriginX: 0.5,
    textOriginY: 0.5,
    printText: false,
    sprite: '',
};

// to type text need to pass array of params in printText property

export default class TintButton extends Phaser.GameObjects.Container {
    constructor(scene, _options = {}) {
        const options = { ...defaultOptions, ..._options };
        super(scene, 0, 0);
        this.scene = scene;
        this._sprite = options.sprite;
        this.options = options;
        this.make();
    }

    make() {
        this.base = this.scene.add.image(0, 0, 'atlas', this._sprite).setDepth(1);
        const config = { fontFamily: this.options.font, fontSize: this.options.fontSize, color: this.options.textColor };
        const startText = this.options.printText ? '' : this.options.text;
        this.text = this.scene.add
            .text(this.options.textX, this.options.textY, startText, config)
            .setDepth(2)
            .setOrigin(this.options.textOriginX, this.options.textOriginY);
        this.base.setTint(this.options.buttonColor);
        this.add([this.base, this.text]);
        this._sort();
        if (!startText) {
            Utils.animText(this.text, this.options.text, ...this.options.printText);
        }
    }

    changeColor({ yoyo, to = GREEN, duration = 500 }) {
        const fromColor = Phaser.Display.Color.ValueToColor(this.options.buttonColor);
        const toColor = Phaser.Display.Color.ValueToColor(to);
        this.options.buttonColor = yoyo ? this.options.buttonColor : to;
        this.scene.tweens.addCounter({
            from: 0,
            to: 100,
            yoyo,
            duration,
            onUpdate: (tween) => {
                const c = Phaser.Display.Color.Interpolate.ColorWithColor(fromColor, toColor, 100, tween.getValue());
                this.base.setTint(Phaser.Display.Color.GetColor(c.r, c.g, c.b));
            },
        });
    }

    setOnClick(callback, ctx) {
        this.base.setInteractive().once('pointerdown', callback, ctx);
        return this;
    }

    offClick() {
        this.base.off('pointerdown');
        return this;
    }

    setText(newText) {
        this.options.text = newText;
        this.text.setText(newText);
        return this;
    }

    setFontSize(newSize) {
        this.options.fontSize = newSize;
        this.text.setFontSize(newSize);
        return this;
    }

    setTextColor(newColor) {
        this.options.textColor = newColor;
        this.text.setColor(newColor);
        return this;
    }
}
