import Item from './Item';
import Scene from '../Scene';
import Utils from '../../Utils';

export default class Items extends Phaser.GameObjects.Container {
    constructor(scene, items = [], isOnce = true, gap = 250, mode = 'glow') {
        super(scene, 0, 0);
        this.tweens = scene.tweens;
        this.addProperties(['pos'])
            .setCustomPosition(Scene.LANDSCAPE_MAX_WIDTH, -150, Scene.PORTRAIT_MAX_WIDTH, -150)
            .setCustomAlign('Bottom')
            .buildItems(items, isOnce, gap, mode);

        const cb = this.onResize.bind(this);
        const onDestroy = () => {
            window.removeEventListener('resize', cb);
        };
        window.addEventListener('resize', cb);
        this.on('destroy', onDestroy);
    }

    onResize() {
        this.setPositions();
    }

    buildItems(items, isOnce = true, gap = 250, mode = 'glow') {
        this.clear();
        this.items = [];
        this.gap = gap;
        this.itemsLength = items.length;

        items.forEach((img, index) => {
            const item = new Item(this.scene, img, isOnce, mode)
                .setDepth(2)
                .setPosition(this.getXByIndex(index), this.getYByIndex(index));
            this.items.push(item);
            this.add([item]);
        });
        this._sort();
        return this;
    }

    setPositions() {
        this.items?.forEach((item, index) => {
            item.setPosition(this.getXByIndex(index), this.getYByIndex(index));
        });
    }

    getXByIndex(index) {
        const { isPortrait } = this.scene.game.scale;

        if (isPortrait) {
            return 0;
        }

        let half = Math.floor(this.itemsLength / 2);
        if (this.itemsLength % 2 === 0) {
            half -= 0.5;
        }
        const x = (index - half) * this.gap;
        return x;
    }

    getYByIndex(index) {
        const { isPortrait } = this.scene.game.scale;

        if (isPortrait) {
            let half = Math.floor(this.itemsLength / 2);
            if (this.itemsLength % 2 === 0) {
                half -= 0.5;
            }
            const y = (index - half) * this.gap;
            return y;
        }

        return 0;
    }

    show(options = {}) {
        this.tweens.add({ targets: this, lx: 0, ly: -150, px: 0, py: -150, duration: 750, ease: 'Sine.out', ...options });
        return this;
    }

    remove() {
        this.disableItems();
        this.tweens.add({
            targets: this,
            lx: Scene.LANDSCAPE_MAX_WIDTH,
            px: Scene.PORTRAIT_MAX_WIDTH,
            duration: 750,
            onComplete: () => this.destroy(),
        });
    }

    hide() {
        this.tweens.add({
            targets: this,
            lx: Scene.LANDSCAPE_MAX_WIDTH,
            px: Scene.PORTRAIT_MAX_WIDTH,
            duration: 750,
        });
        return this;
    }

    disableItems() {
        this.items.forEach((obj) => {
            obj.disable();
        });
    }

    clear() {
        if (!this.items) {
            return this;
        }
        this.disableItems();
        Utils.destroy([...this.items]);
        return this;
    }

    getItemByName(name) {
        return this.items.find(({ img }) => img === name);
    }
}
