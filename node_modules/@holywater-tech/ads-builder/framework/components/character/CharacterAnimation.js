import { EVENTS_DEFAULT } from '../EventsDispatcher';
import { CharacterAnimationConfig, STATES, EMOTIONS, BODY_PARTS } from './CharacterAnimationConfig';

export default class CharacterAnimation extends Phaser.GameObjects.Container {
    constructor(scene, assets = new CharacterAnimationConfig(), debug = false) {
        super(scene);

        this.scene = scene;
        this.debug = debug;

        this._bodyParts = {};
        this._duration = 500;
        this._state = STATES.STATIC;
        this._isRunningAnimation = false;
        this._loopAnimations = [];

        this._addBodyParts(assets.body);
        this._updateHands();
    }

    setStaticState(callback) {
        if (this._state === STATES.STATIC || this._isRunningAnimation) return;

        this._state = STATES.STATIC;
        this._isRunningAnimation = true;

        const onComplete = () => {
            this.bodyContainer.sort('depth');
            this._onComplete();
            callback && callback();
        };

        this._stopLoopAnimation();
        this.scene.tweens.add({ targets: this.bodyContainer, x: 0, y: 0, duration: this._duration });

        const keys = Object.keys(this._bodyParts);
        keys.forEach((key, index) => {
            const isLastObj = index === keys.length - 1;
            const func = isLastObj ? onComplete : undefined;

            this.scene.tweens.add({
                targets: this._bodyParts[key].image,
                angle: 0,
                duration: this._duration,
                onComplete: () => {
                    this._bodyParts[key].container.setDepth(this._bodyParts[key].defaultProp.depth);
                    this._bodyParts[key].image.scaleX = 1;
                    func && func();
                },
            });

            if (this._bodyParts[key].image.scaleX === -1) {
                this.scene.tweens.add({ targets: this._bodyParts[key].image, scaleX: -0.8, duration: this._duration / 2, onComplete: () => {
                    this._bodyParts[key].image.scaleX = 0.8;
                }});
                this.scene.tweens.add({ targets: this._bodyParts[key].image, scaleX: 1, duration: this._duration / 2, delay: this._duration / 2 });
            }

            const defaultAlpha = this._bodyParts[key].defaultProp.alpha;
            if (defaultAlpha !== undefined) {
                this.scene.tweens.add({ targets: this._bodyParts[key].image, alpha: defaultAlpha, duration: this._duration });
            }
        });
    }

    setAngerState() {
        if (!this._isPlayAnimation(() => this.setAngerState(), STATES.ANGER)) return;

        this.changeFace(EMOTIONS.ANGRY);
        this.changeDepth(BODY_PARTS.FOREARM_LEFT, 1);

        this._addTween([
            // Hand right, animation part 1
            { image: BODY_PARTS.ARM_RIGHT, angle: 1 },
            { image: BODY_PARTS.FOREARM_RIGHT, angle: 8 },
            { image: BODY_PARTS.HAND_RIGHT, angle: 12 },
            // Hand left, animation part 1
            { image: BODY_PARTS.ARM_LEFT, angle: 7 },
            { image: BODY_PARTS.FOREARM_LEFT, angle: 12 },
            { image: BODY_PARTS.HAND_LEFT, angle: 25 },
            // Hand right, animation part 2
            { image: BODY_PARTS.ARM_RIGHT, angle: 2, delay: this._duration },
            { image: BODY_PARTS.FOREARM_RIGHT, angle: 15, delay: this._duration },
            { image: BODY_PARTS.HAND_RIGHT, angle: 25, delay: this._duration },
            // Hand left, animation part 2
            { image: BODY_PARTS.ARM_LEFT, angle: 0, delay: this._duration },
            { image: BODY_PARTS.FOREARM_LEFT, angle: 0, delay: this._duration },
            { image: BODY_PARTS.HAND_LEFT, angle: 0, delay: this._duration },
            // Face, animation part 2
            { image: BODY_PARTS.FACE_RED, alpha: 1, delay: this._duration, onComplete: () => this._onComplete() },
        ]);
    }

    setEnvyState() {
        if (!this._isPlayAnimation(() => this.setEnvyState(), STATES.ENVY)) return;

        this.changeFace(EMOTIONS.SAD);
        this.changeDepth(BODY_PARTS.DRESS, 6);
        this.changeDepth(BODY_PARTS.FOREARM_LEFT, 6);
        this.changeDepth(BODY_PARTS.HAND_LEFT, 6);

        this._addTween([
            // Hand right, animation part 1
            { image: BODY_PARTS.FOREARM_RIGHT, angle: -113 },
            { image: BODY_PARTS.HAND_RIGHT, angle: -113, onComplete: () => this.changeFace(EMOTIONS.ANGRY) },
            // Hand left, animation part 2
            { image: BODY_PARTS.FOREARM_LEFT, angle: 125, delay: this._duration },
            { image: BODY_PARTS.HAND_LEFT, angle: 125, delay: this._duration, onComplete: () => this._onComplete() },
        ]);
    }

    setShameState() {
        if (!this._isPlayAnimation(() => this.setShameState(), STATES.SHAME)) return;

        this.changeFace(EMOTIONS.SHY);
        this.changeDepth(BODY_PARTS.HAND_LEFT, 13);

        this._addTween([
            // Hand right, animation part 1
            { image: BODY_PARTS.FOREARM_RIGHT, angle: -55 },
            { image: BODY_PARTS.HAND_RIGHT, angle: -55, onComplete: () => this.changeFace(EMOTIONS.SAD) },
            // Hand right, animation part 2
            { image: BODY_PARTS.FOREARM_RIGHT, angle: -35, delay: this._duration },
            { image: BODY_PARTS.HAND_RIGHT, angle: -35, delay: this._duration },
            // Hand left, animation part 2
            { image: BODY_PARTS.FOREARM_LEFT, angle: 45, delay: this._duration },
            { image: BODY_PARTS.HAND_LEFT, angle: 45, delay: this._duration },
            // Face, animation part 2
            { image: BODY_PARTS.HAIR_BACK, angle: 10, delay: this._duration },
            { image: BODY_PARTS.FACE, angle: 10, delay: this._duration },
            { image: BODY_PARTS.HAIR_FRONT, angle: 10, delay: this._duration, onComplete: () => this._onComplete() },
        ]);
    }

    setFrightState() {
        if (!this._isPlayAnimation(() => this.setFrightState(), STATES.FRIGHT)) return;

        this.changeFace(EMOTIONS.SURPRISE);

        this._addTween([
            // Hand right, animation part 1
            { image: BODY_PARTS.ARM_RIGHT, angle: -20 },
            { image: BODY_PARTS.FOREARM_RIGHT, angle: -147 },
            { image: BODY_PARTS.HAND_RIGHT, angle: -147 },
            // Hand left, animation part 2
            { image: BODY_PARTS.ARM_LEFT, angle: -25, delay: this._duration },
            { image: BODY_PARTS.FOREARM_LEFT, angle: -25, delay: this._duration },
            { image: BODY_PARTS.HAND_LEFT, angle: -25, delay: this._duration },
            // Hand left, animation part 3
            { image: BODY_PARTS.FOREARM_LEFT, angle: -177, delay: this._duration },
            { image: BODY_PARTS.HAND_LEFT, angle: -177, delay: this._duration },
            // Face, animation part 3
            { image: BODY_PARTS.HAIR_BACK, angle: -10, delay: this._duration },
            { image: BODY_PARTS.FACE, angle: -10, delay: this._duration },
            { image: BODY_PARTS.HAIR_FRONT, angle: -10, delay: this._duration, onComplete: () => this._onComplete() },
        ]);
    }

    setJoyState() {
        if (!this._isPlayAnimation(() => this.setJoyState(), STATES.JOY)) return;

        this.changeFace(EMOTIONS.JOY);

        const changeHand = (hand) => {
            this._bodyParts[hand].image.scaleX = -0.8;
        };

        this._addTween([
            // Hand right, animation part 1
            { image: BODY_PARTS.FOREARM_RIGHT, angle: -144, onComplete: () => this.changeFace(EMOTIONS.FLIRTY) },
            { image: BODY_PARTS.HAND_RIGHT, angle: -80, scaleX: 0.8, duration: this._duration / 2, onComplete: () => changeHand(BODY_PARTS.HAND_RIGHT) },
            { image: BODY_PARTS.HAND_RIGHT, angle: -160, scaleX: -1, duration: this._duration / 2, delay: this._duration / 2 },
            // Hand left, animation part 2
            { image: BODY_PARTS.FOREARM_LEFT, angle: 165, delay: this._duration },
            { image: BODY_PARTS.HAND_LEFT, angle: 62, scaleX: 0.8, duration: this._duration / 2, delay: this._duration, onComplete: () => changeHand(BODY_PARTS.HAND_LEFT) },
            { image: BODY_PARTS.HAND_LEFT, angle: 125, scaleX: -1, duration: this._duration / 2, delay: this._duration + this._duration / 2, onComplete: () => this._onComplete() },
        ]);
    }

    setAtonishmentState() {
        if (!this._isPlayAnimation(() => this.setAtonishmentState(), STATES.ASTONISHMENT)) return;

        this.changeFace(EMOTIONS.DEFAULT);

        this._addTween([
            // Hand right, animation part 1
            { image: BODY_PARTS.ARM_RIGHT, angle: -5 },
            { image: BODY_PARTS.FOREARM_RIGHT, angle: -25 },
            { image: BODY_PARTS.HAND_RIGHT, angle: -25, onComplete: () => this.changeFace(EMOTIONS.SURPRISE) },
            // Hand right, animation part 2
            { image: BODY_PARTS.FOREARM_RIGHT, angle: -144, delay: this._duration },
            { image: BODY_PARTS.HAND_RIGHT, angle: -144, delay: this._duration },
            // Hand left, animation part 2
            { image: BODY_PARTS.FOREARM_LEFT, angle: -25, delay: this._duration },
            { image: BODY_PARTS.HAND_LEFT, angle: -25, delay: this._duration, onComplete: () => this._onComplete() },
        ]);
    }

    setColdState() {
        if (!this._isPlayAnimation(() => this.setColdState(), STATES.COLD)) return;

        this.changeFace(EMOTIONS.SAD);
        this.changeDepth(BODY_PARTS.FOREARM_LEFT, 13);
        this.changeDepth(BODY_PARTS.HAND_LEFT, 14);

        this._addTween([
            // Hand right, animation part 1
            { image: BODY_PARTS.FOREARM_RIGHT, angle: -55 },
            { image: BODY_PARTS.HAND_RIGHT, angle: -55 },
            // Hand left, animation part 2
            { image: BODY_PARTS.ARM_LEFT, angle: 5, delay: this._duration },
            { image: BODY_PARTS.FOREARM_LEFT, angle: 145, delay: this._duration },
            { image: BODY_PARTS.HAND_LEFT, angle: 145, delay: this._duration, onComplete: () => this._onComplete() },
        ]);

        const tween = this.scene.tweens.add({
            targets: this.bodyContainer,
            x: '-=5',
            y: '-=5',
            duration: this._duration / 2,
            yoyo: true,
            repeat: -1,
        });
        this._loopAnimations.push(tween);
    }

    setHotState() {
        if (!this._isPlayAnimation(() => this.setHotState(), STATES.HOT)) return;

        this.changeFace(EMOTIONS.SAD);

        this._addTween([
            // Hand right, animation part 1
            { image: BODY_PARTS.ARM_RIGHT, angle: -8 },
            { image: BODY_PARTS.FOREARM_RIGHT, angle: -12 },
            { image: BODY_PARTS.HAND_RIGHT, angle: -12 },
            // Hand left, animation part 2
            { image: BODY_PARTS.ARM_LEFT, angle: -15, delay: this._duration },
            { image: BODY_PARTS.FOREARM_LEFT, angle: -185, delay: this._duration },
            { image: BODY_PARTS.HAND_LEFT, angle: -185, delay: this._duration },
            // Face, animation part 2
            { image: BODY_PARTS.FACE_RED, alpha: 1, delay: this._duration },
            // Sweat, animation part 2
            { image: BODY_PARTS.SWEAT, alpha: 1, delay: this._duration, onComplete: () => this._onComplete() },
        ]);
    }

    setIdleState() {
        if (!this._isPlayAnimation(() => this.setIdleState(), STATES.IDLE)) return;

        this.changeFace(EMOTIONS.DEFAULT);

        this._addTween(
            [
                // Hand right, animation part 1
                { image: BODY_PARTS.FOREARM_RIGHT, angle: 5 },
                { image: BODY_PARTS.HAND_RIGHT, angle: 5 },
                // Hand left, animation part 1
                { image: BODY_PARTS.FOREARM_LEFT, angle: 5 },
                { image: BODY_PARTS.HAND_LEFT, angle: 5 },
                // Face, animation part 1
                { image: BODY_PARTS.HAIR_BACK, angle: 5 },
                { image: BODY_PARTS.FACE, angle: 5 },
                { image: BODY_PARTS.HAIR_FRONT, angle: 5 },
                // Hand right, animation part 2
                { image: BODY_PARTS.FOREARM_RIGHT, angle: 0, delay: this._duration },
                { image: BODY_PARTS.HAND_RIGHT, angle: 0, delay: this._duration },
                // Hand left, animation part 2
                { image: BODY_PARTS.FOREARM_LEFT, angle: 0, delay: this._duration },
                { image: BODY_PARTS.HAND_LEFT, angle: 0, delay: this._duration },
                // Face, animation part 2
                { image: BODY_PARTS.HAIR_BACK, angle: 0, delay: this._duration },
                { image: BODY_PARTS.FACE, angle: 0, delay: this._duration },
                { image: BODY_PARTS.HAIR_FRONT, angle: 0, delay: this._duration, onComplete: () => this._onComplete() },
            ],
            true,
        );
    }

    setMeditationState() {
        if (!this._isPlayAnimation(() => this.setMeditationState(), STATES.MEDITATION)) return;

        this.changeFace(EMOTIONS.FLIRTY);

        const changeHand = (hand) => {
            this._bodyParts[hand].image.scaleX = -0.8;
        };

        this._addTween([
            // Hand left, animation part 1
            { image: BODY_PARTS.ARM_LEFT, angle: -15 },
            { image: BODY_PARTS.FOREARM_LEFT, angle: -15 },
            { image: BODY_PARTS.HAND_LEFT, angle: -15 },
            // Hand left, animation part 2
            { image: BODY_PARTS.FOREARM_LEFT, angle: -185, delay: this._duration },
            { image: BODY_PARTS.HAND_LEFT, angle: -122, scaleX: 0.8, duration: this._duration / 2, delay: this._duration, onComplete: () => changeHand(BODY_PARTS.HAND_LEFT) },
            { image: BODY_PARTS.HAND_LEFT, angle: -225, scaleX: -1, duration: this._duration / 2, delay: this._duration + this._duration / 2 },
            // Face, animation part 2
            { image: BODY_PARTS.HAIR_BACK, angle: 5, delay: this._duration },
            { image: BODY_PARTS.FACE, angle: 5, delay: this._duration },
            { image: BODY_PARTS.HAIR_FRONT, angle: 5, delay: this._duration, onComplete: () => this._onComplete() },
        ]);
    }

    setEmbraceState() {
        if (!this._isPlayAnimation(() => this.setEmbraceState(), STATES.EMBRACE)) return;

        this.changeFace(EMOTIONS.DEFAULT);

        this._addTween([
            // Hand right, animation part 1
            { image: BODY_PARTS.FOREARM_RIGHT, angle: -25 },
            { image: BODY_PARTS.HAND_RIGHT, angle: -25 },
            // Hand right, animation part 1
            { image: BODY_PARTS.FOREARM_LEFT, angle: -100 },
            { image: BODY_PARTS.HAND_LEFT, angle: -100 },
            // Face, animation part 1
            { image: BODY_PARTS.HAIR_BACK, angle: 5 },
            { image: BODY_PARTS.FACE, angle: 5 },
            { image: BODY_PARTS.HAIR_FRONT, angle: 5 },
            // Hand right, animation part 2
            { image: BODY_PARTS.FOREARM_RIGHT, angle: -12, delay: this._duration },
            { image: BODY_PARTS.HAND_RIGHT, angle: -12, delay: this._duration },
            // Hand right, animation part 2
            { image: BODY_PARTS.FOREARM_LEFT, angle: -25, delay: this._duration },
            { image: BODY_PARTS.HAND_LEFT, angle: -25, delay: this._duration },
            // Face, animation part 2
            { image: BODY_PARTS.HAIR_BACK, angle: 0, delay: this._duration },
            { image: BODY_PARTS.FACE, angle: 0, delay: this._duration },
            { image: BODY_PARTS.HAIR_FRONT, angle: 0, delay: this._duration, onComplete: () => this._onComplete() },
        ]);
    }

    setDuration(duration) {
        this._duration = duration;
    }

    changeFace(texture) {
        this._bodyParts[BODY_PARTS.FACE].image.setTexture(texture);
    }

    changeDepth(type, depth) {
        this._bodyParts[type].container.setDepth(depth);
        this.bodyContainer.sort('depth');
    }

    update() {
        this._updateHands();
    }

    _updateHands() {
        this._updateHand(BODY_PARTS.ARM_RIGHT, BODY_PARTS.FOREARM_RIGHT);
        this._updateHand(BODY_PARTS.FOREARM_RIGHT, BODY_PARTS.HAND_RIGHT, true);
        this._updateHand(BODY_PARTS.ARM_LEFT, BODY_PARTS.FOREARM_LEFT);
        this._updateHand(BODY_PARTS.FOREARM_LEFT, BODY_PARTS.HAND_LEFT, true);
    }

    _updateHand(firstImage, secondImage, isHand = false) {
        const firstGameObject = this._bodyParts[firstImage];
        const secondGameObject = this._bodyParts[secondImage];

        const newX = firstGameObject.image.x - secondGameObject.image.x;
        const newY = firstGameObject.image.y - secondGameObject.image.y;
        const radians = (firstGameObject.image.angle * Math.PI) / 180;
        const angle = radians + Math.atan2(newY, newX);

        if (isHand) {
            secondGameObject.container.x = firstGameObject.container.x + (newX + newY * Math.cos(angle));
            secondGameObject.container.y = firstGameObject.container.y + (newY + newY * Math.sin(angle));

            return;
        }

        secondGameObject.container.x = newX + newY * Math.cos(angle);
        secondGameObject.container.y = newY + newY * Math.sin(angle);
    }

    _isPlayAnimation(callback, state) {
        if (this._isRunningAnimation) return false;
        if (this._state !== STATES.STATIC) {
            this.setStaticState(() => callback());
            return false;
        }

        this._state = state;
        this._isRunningAnimation = true;

        return true;
    }

    _addBodyParts(assets) {
        this.bodyContainer = this.scene.add.container(0, 0);
        this.add(this.bodyContainer);

        const keys = Object.keys(assets);
        keys.forEach((key) => {
            this._bodyParts[key] = {};
            const gameObject = this._bodyParts[key];
            gameObject.container = this.scene.add.container(0, 0).setDepth(assets[key].depth);
            gameObject.image = this.scene.add.image(0, 0, assets[key].img);
            gameObject.defaultProp = {};
            gameObject.defaultProp.depth = assets[key].depth;

            gameObject.container.add(gameObject.image);
            this.bodyContainer.add(gameObject.container);

            this._addOriginPoints(gameObject, gameObject.container, assets[key].originX, assets[key].originY);

            if (assets[key].alpha !== undefined) {
                gameObject.image.setAlpha(assets[key].alpha);
                gameObject.defaultProp.alpha = assets[key].alpha;
            }
        });

        this.bodyContainer.sort('depth');
    }

    _addOriginPoints(gameObject, container, originX, originY) {
        const width = gameObject.image.displayWidth;
        const height = gameObject.image.displayHeight;

        gameObject.image.setOrigin(originX, originY);
        gameObject.image.setPosition(-width / 2 + width * originX, -height / 2 + height * originY);

        if (this.debug) {
            const pointSize = 5;
            const x = -width + (width * (originX + 0.5)) - (pointSize / 2);
            const y = -height + (height * (originY + 0.5)) - (pointSize / 2);

            const point = this.scene.add.graphics();
            point.fillStyle(0xf0ff0f, 1);
            point.fillRect(0, 0, pointSize, pointSize);
            point.x = x;
            point.y = y;
            container.add(point);

            gameObject.point = point;
        }
    }

    _addTween(animations, loop = false) {
        for (let i = 0; i < animations.length; i++) {
            const config = {
                targets: this._bodyParts[animations[i].image].image,
                duration: animations[i].duration || this._duration,
            };

            if (animations[i].angle !== undefined) config.angle = animations[i].angle;
            if (animations[i].alpha !== undefined) config.alpha = animations[i].alpha;
            if (animations[i].scaleX !== undefined) config.scaleX = animations[i].scaleX;
            if (animations[i].delay !== undefined) config.delay = animations[i].delay;
            if (animations[i].onComplete !== undefined) {
                config.onComplete = () => {
                    if (this._loopAnimations.length && loop) {
                        this._addTween(animations, true);
                    }
                    animations[i].onComplete();
                };
            }

            const tween = this.scene.tweens.add(config);
            loop && this._loopAnimations.push(tween);
        }
    }

    _stopLoopAnimation() {
        for (let i = 0; i < this._loopAnimations.length; i++) {
            this._loopAnimations[i].stop();
            this._loopAnimations[i] = null;
        }

        this._loopAnimations = [];
    }

    _onComplete() {
        this._isRunningAnimation = false;
        this.scene.emitter.emit(EVENTS_DEFAULT.CHARACTER_ANIMATION_COMPLETE, this._state);
    }
}
