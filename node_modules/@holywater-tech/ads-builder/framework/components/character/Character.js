import Scene from '../Scene';

export const TYPES = {
    HAIR: 'hair',
    BACK_HAIR: 'backHair',
    BODY: 'body',
    EYES: 'eyes',
    CLOTHES: 'clothes',
    SHOES: 'shoes',
    ACCESSORIES: 'accessories',
    FACE: 'face',
    HAT: 'hat',
    HAND_LEFT: 'handLeft',
    HAND_RIGHT: 'handRight',
    PANTS: 'pants',
    CUSTOM: 'custom',
};

const layers = {
    zips: 1,
    body: 3,
    backHair: 2,
    shoes: 10,
    clothes: 14,
    accessories: 40,
    face: 25,
    eyes: 27,
    hair: 30,
    hat: 35,
    handLeft: 16,
    handRight: 16,
    pants: 7,
    clothesTop: 15,
};

export default class Character extends Phaser.GameObjects.Container {
    static Layers = layers;

    constructor(scene, defaultAssets) {
        super(scene, 0, 0);
        this.tweens = scene.tweens;
        this.setCustomAlign('Bottom').addProperties(['pos', 'scale']).setCustomPosition(0, 0, 0, 0).setCustomScale(1, 1, 1, 1);
        this._buildCharacter(defaultAssets);

        this.on('destroy', this._onDestroy, this);
    }

    addMaxScale(scales = [1, 1]) {
        this.addProperties(['maxScale'])
            .setSize(this.body.displayWidth, this.body.displayHeight)
            .setMaxScale(...scales);
        return this;
    }

    hide(options = {}) {
        this.tweens.add({
            targets: this,
            px: -Scene.PORTRAIT_MAX_WIDTH,
            lx: -Scene.LANDSCAPE_MAX_WIDTH,
            duration: 1000,
            ...options,
        });
        return this;
    }

    show(options = {}) {
        this.tweens.add({
            targets: this,
            px: this.defaultPX,
            lx: this.defaultLX,
            ly: this.defaultLY,
            py: this.defaultPY,
            duration: 1000,
            ...options,
        });
        return this;
    }

    setOutsideScreen() {
        this.setCustomPosition(-Scene.LANDSCAPE_MAX_WIDTH, 0, -Scene.PORTRAIT_MAX_WIDTH, 0);
    }

    setDefaultPosition(lx, ly, px, py) {
        if (typeof lx === 'object') {
            const pos = lx;
            this.defaultLX = pos.lx;
            this.defaultLY = pos.ly;
            this.defaultPX = pos.px;
            this.defaultPY = pos.py;
        } else {
            this.defaultLX = lx;
            this.defaultLY = ly;
            this.defaultPX = px;
            this.defaultPY = py;
        }

        this.lx = this.defaultLX;
        this.ly = this.defaultLY;
        this.px = this.defaultPX;
        this.py = this.defaultPY;
        return this;
    }

    _onDestroy() {
        this.isDestroyed = true;
    }

    _buildCharacter(assets) {
        const body = assets.find(({ type }) => type === TYPES.BODY);
        const face = assets.find(({ type }) => type === TYPES.FACE);
        const hair = assets.find(({ type }) => type === TYPES.HAIR);
        const clothes = assets.find(({ type }) => type === TYPES.CLOTHES);
        const shoes = assets.find(({ type }) => type === TYPES.SHOES);
        const hat = assets.find(({ type }) => type === TYPES.HAT);
        const accessories = assets.find(({ type }) => type === TYPES.ACCESSORIES);
        const handL = assets.find(({ type }) => type === TYPES.HAND_LEFT);
        const handR = assets.find(({ type }) => type === TYPES.HAND_RIGHT);
        const pants = assets.find(({ type }) => type === TYPES.PANTS);
        const custom = assets.filter(({ type }) => type === TYPES.CUSTOM);

        this.leftHand = null;
        this.rightHand = null;

        this.changeBody(body);
        this.changeFace(face);
        this.changeShoes(shoes);
        this.changeHair(hair, hair?.backHair, hair?.color);
        this.changeClothes(clothes);
        this.changeHat(hat);
        this.changeAccessories(accessories);
        this.changePants(pants);
        this.changeHand(handL);
        this.changeHand(handR);
        custom.forEach((asset) => this.changeCustomAsset(asset));
    }

    _setTexture(asset, img) {
        asset.setTexture(img);
        asset.img = img;
    }

    _checkAsset(asset) {
        if (!asset) {
            return;
        }
        const name = asset.img || asset;
        if (this[name]) {
            return;
        }
        const depth = asset.depth || layers[asset] || layers[asset.img] || layers[asset.type];
        this[name] = this.scene.add.image(0, 0, '').setDepth(depth).setOrigin(0.5, 1);
        this.add([this[name]]);
        this._sort();
    }

    changeCustomAsset(asset, toReplace = '') {
        if (toReplace) {
            const obj = this.getFirst('img', toReplace);
            obj?.destroy();
        }
        this._checkAsset(asset);
        this._setTexture(this[asset.img], asset.img);
        return this;
    }

    removeCustomAsset(img) {
        if (!img) {
            return this;
        }
        const obj = this.getFirst('img', img);
        obj?.destroy();
        return this;
    }

    changeBody(asset) {
        if (!asset) {
            return this;
        }
        const value = typeof asset !== 'string' ? asset : {};
        this._checkAsset({ ...value, img: TYPES.BODY });
        this._setTexture(this.body, value?.img || asset);
        return this;
    }

    changeFace(asset) {
        if (!asset) {
            return this;
        }
        const value = typeof asset !== 'string' ? asset : {};
        this._checkAsset({ ...value, img: TYPES.FACE });
        this._setTexture(this.face, value?.img || asset);
        return this;
    }

    changeClothes(asset) {
        if (!asset) {
            return this;
        }
        const value = typeof asset !== 'string' ? asset : {};
        this._checkAsset({ ...value, img: TYPES.CLOTHES });
        this._setTexture(this.clothes, value?.img || asset);
        return this;
    }

    changeHair(hair, withBackHair, color) {
        if (!hair) {
            return this;
        }

        const value = typeof hair !== 'string' ? hair : {};
        const img = value.img || hair;

        if (withBackHair === true) {
            this._checkAsset(TYPES.BACK_HAIR);
            this._setTexture(this.backHair, `${img}_back`);
        }

        this._checkAsset({ ...value, img: TYPES.HAIR });
        this._setTexture(this.hair, value?.img || hair);

        if (color) {
            this.hair?.setTint(color);
            this.backHair?.setTint(color);
        }

        return this;
    }

    changeShoes(asset) {
        if (!asset) {
            return this;
        }
        const value = typeof asset !== 'string' ? asset : {};
        this._checkAsset({ ...value, img: TYPES.SHOES });
        this._setTexture(this.shoes, value?.img || asset);
        return this;
    }

    changeHat(asset) {
        if (!asset) {
            return this;
        }
        const value = typeof asset !== 'string' ? asset : {};
        this._checkAsset({ ...value, img: TYPES.HAT });
        this._setTexture(this.hat, value?.img || asset);
        return this;
    }

    changePants(asset) {
        if (!asset) {
            return this;
        }
        const value = typeof asset !== 'string' ? asset : {};
        this._checkAsset({ ...value, img: TYPES.PANTS });
        this._setTexture(this.pants, value?.img || asset);
        return this;
    }

    changeAccessories(asset) {
        if (!asset) {
            return this;
        }
        const value = typeof asset !== 'string' ? asset : {};
        this._checkAsset({ ...value, img: TYPES.ACCESSORIES });
        this._setTexture(this.accessories, value?.img || asset);
        return this;
    }

    changeHand(asset) {
        if (!asset) {
            return this;
        }
        const name = `${asset.side}Hand`;
        const depth = asset.depth || Character.Layers[asset.type];

        this[name]?.destroy();
        this[name] = this.scene.add
            .image(asset.x, asset.y, asset.img)
            .setDepth(depth)
            .setOrigin(asset.originX, asset.originY)
            .setAngle(asset.angle);

        this.add(this[name]);
        this[name].info = asset;
        this._sort();
        return this;
    }

    handsUp() {
        let leftX = '+=0';
        let leftY = '+=0';
        let rightX = '+=0';
        let rightY = '+=0';
        if (this.leftHand?.info.upX) {
            leftX = (this.flipX ? -1 : 1) * this.leftHand.info.upX;
        }
        if (this.leftHand?.info.upY) {
            leftY = this.leftHand.info.upY;
        }
        if (this.rightHand?.info.upX) {
            rightX = (this.flipX ? -1 : 1) * this.rightHand.info.upX;
        }
        if (this.rightHand?.info.upY) {
            rightY = this.rightHand.info.upY;
        }
        const leftAngle = (this.flipX ? -1 : 1) * (this.leftHand?.info.angleUp || 0);
        const rightAngle = (this.flipX ? -1 : 1) * (this.rightHand?.info.angleUp || 0);
        this.leftHand && this.tweens.add({ targets: this.leftHand, angle: leftAngle, y: leftY, x: leftX, duration: 250 });
        this.rightHand && this.tweens.add({ targets: this.rightHand, angle: rightAngle, y: rightY, x: rightX, duration: 250 });
        return this;
    }

    handsDown() {
        if (this.leftHand) {
            let { angle, x } = this.leftHand.info;
            const { y } = this.leftHand.info;
            angle *= this.flipX ? -1 : 1;
            x *= this.flipX ? -1 : 1;
            this.leftHand && this.tweens.add({ targets: this.leftHand, angle, x, y, duration: 250 });
        }
        if (this.rightHand) {
            let { angle, x } = this.rightHand.info;
            const { y } = this.rightHand.info;
            angle *= this.flipX ? -1 : 1;
            x *= this.flipX ? -1 : 1;
            this.rightHand && this.tweens.add({ targets: this.rightHand, angle, x, y, duration: 250 });
        }

        return this;
    }

    setFlipX(flipX) {
        this.flipX = flipX;
        this.each((obj) => {
            if (obj.flipX === flipX) {
                return;
            }
            if (obj.info) {
                obj.setFlipX(flipX)
                    .setOrigin(1 - obj.originX, obj.originY)
                    .setAngle(-obj.angle)
                    .setPosition(-obj.x, obj.y);
                return;
            }
            obj.setFlipX(flipX);
        });
        return this;
    }

    highlight(type, options = {}) {
        const asset = this[type];
        const img = options.name || `${asset.img}_highlight`;
        const highlightItem = this.scene.add.image(0, 0, img).setDepth(asset.depth + 1);
        highlightItem.setAlpha(0).setOrigin(0.5, 1);
        this.add([highlightItem]);
        this._sort();
        this.tweens.add({
            targets: highlightItem,
            alpha: 1,
            yoyo: true,
            repeat: 2,
            duration: 500,
            ...options,
            onComplete: highlightItem.destroy,
        });
        return this;
    }

    startBlinking(sprite) {
        this.isBlinking = true;
        if (this.closedEyes) {
            this._blinking();
            return this;
        }
        this.closedEyes = this.scene.add.image(0, 0, sprite).setDepth(Character.Layers.eyes).setOrigin(0.5, 1).setAlpha(0);

        this.add([this.closedEyes]);
        this._sort();
        this._blinking();
        return this;
    }

    stopBlinking() {
        this.isBlinking = false;
        return this;
    }

    _blinking() {
        if (this.isDestroyed || !this.isBlinking) {
            return;
        }
        this.closedEyes.setAlpha(1);
        this.scene.time.delayedCall(250, () => {
            if (this.isDestroyed) {
                return;
            }
            this.closedEyes.setAlpha(0);
        });
        this.scene.time.delayedCall(3000, this._blinking, [], this);
    }

    scaleAnimation(options) {
        const { pScale, lScale } = options;
        this.tweens.add({
            targets: this,
            pScaleX: pScale,
            pScaleY: pScale,
            lScaleX: lScale,
            lScaleY: lScale,
            duration: 500,
            ...options,
        });
        return this;
    }

    starsExplosion(frames = ['star_1'], duration = 750, options = {}) {
        const star = this.scene.add
            .particles('atlas', frames[0])
            .addProperties(['pos'])
            .setDepth(this.depth + 1)
            .setCustomAlign('Bottom');
        this.scene.mainContainer.add([star]);
        star.px = this.px;
        star.py = (-this.body.displayHeight * this.pScaleY) / 2 - 150;
        star.lx = this.lx;
        star.ly = (-this.body.displayHeight * this.lScaleY) / 2 - 100;

        const alphaEase = (_, _1, val) => {
            if (val <= 0.7) {
                return val + 0.3;
            }
            return 1 - val;
        };

        const particleSettings = {
            x: 0,
            y: 0,
            frames,
            alpha: alphaEase,
            blendMode: 'ADD',
            lifespan: 2000,
            accelerationY: 400,
            speed: { min: 300, max: 450 },
            rotate: { start: 0, end: 45 },
            quantity: 30,
            frequency: 150,
            scale: { start: 0.2, end: 1 },
            ...options,
        };

        const emitter = star.createEmitter({ ...particleSettings });
        const stopEmitter = () => {
            emitter.stop();
            this.scene.time.delayedCall(particleSettings.lifespan, () => star.destroy());
        };
        this.scene.time.delayedCall(duration, stopEmitter, [], this);
    }
}
